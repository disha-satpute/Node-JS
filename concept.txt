----------------------------------Concepts in NodeJs that we implement in MERN repository----------------------------------------------

1) Callback Function :

-  A callback in Node is a non-blocking function that executes task completion, enabling asynchronous processing. 
-  It facilitates scalability by allowing Nodejs to handle multiple requests without waiting for operations to execute
- These callbacks allow developers to interact with request data and construct the appropriate server responses.
___________________________________________________________________________________________________________________________________________________________________

2) Built-in 'events' module (Banking Solution)

- var module = require('events')     //This module provides an EventEmitter class that allows you to create and handle events in Node.js applications.
- var emitter = new module.EventEmitter();  //The emitter object now can emit events and has methods to handle these events.

- emitter.addListener('underBalance',bank.blockAccount);
- emitter.addListener('overBalance',tax.payIncomeTax);
                    /                     \
                   /                        \
Event Listner Registration     'overBalance' is the name of the event.
we also used 'emitter.on'      When emitter.emit('overBalance') is called elsewhere in the code ,this listener function 'tax.payIncomeTax)' will be triggered.

- return{
        withdraw:withdraw,  // each key-value pair represents a property where the key is the property name and the value is a function
        deposit:deposit,
        getBalance:getBalance
    }
- the 'return' statement in the code is creating and exporting an object.
- This object structure allows external code to interact with the account object in a controlled manner.
___________________________________________________________________________________________________________________________________________________________________

3) SoC (Seperation of Concern) :
-  SoC is a fundamental principle in software engineering that promotes clear(no complexity), maintainable, and efficient code by separating
different concerns into Number of modules or components.
-  SoC is not just beneficial but essential for managing the complexity and scale of large software projects.
-  It is good habit and also foundational principle that leads to better software architecture.
_____________________________________________________________________________________________________________________________________________________________________

4) fs module : (CRUD)
- The Node.js file system module allows you to work with the file system on your computer.

fs.appendFile() - method appends specified content to a file. If the file does not exist, the file will be created

fs.open() -  method takes a "flag" as the second argument, if the flag is "w" for "writing", the specified file is opened for writing.
             If the file does not exist, an empty file is created  e.g :  fs.open('mynewfile2.txt', 'w', function (err, file) {  }

fs.writeFile() -  function is used to asynchronously write data to a file.

fs.readFile()  - function is used to asynchronously read the entire contents of a file.

fs.rename()    - rename the file.

fs.unlink()    - Delete the file.
___________________________________________________________________________________________________________________________________________________________________

5) JSON file : (CRUD)

- JSON stands for JavaScript Object Notation
- JSON is a lightweight format for storing and transporting data
- JSON is often used when data is sent from a server to a web page
e.g
{
"employees":[
    {"firstName":"John", "lastName":"Doe"},
    {"firstName":"Anna", "lastName":"Smith"},
    {"firstName":"Peter", "lastName":"Jones"}
]
}

Built-in methods for JSON :

- JSON.parse(data.toString()) : Parses the string data into a JavaScript object.

- JSON.stringify(members) : This line converts the modified members array back into a JSON-formatted string.
___________________________________________________________________________________________________________________________________________________________________

6) Database module : (dbApp)
- mysql  : if you want to interact with MySQL databases, you can use the 'mysql' module.
- mysql2 : It offers several advantages over the older module. It provides better support for modern MySQL features such as prepared statements and stored procedures.

- mysql.createConnection() - is used to create a connection object with connection details such as host, user, password, and database name.
- connection.connect() - establishes a connection to the MySQL server. If successful, it logs the connection thread ID.
- connection.query() - executes a SQL query on the connected MySQL server.
- connection.end() - closes the connection to the MySQL server once all queries are executed.
___________________________________________________________________________________________________________________________________________________________________

7) Modules : (Html Server)

i) express - It simplifies the development of web applications by providing a wide range of functionalities and utilities to handle various tasks such as
             1) Routing - get, post, put,delete
             2) Middleware - req, res, next
             3) Template Engines - EJS, Handlebars
             4) Static files - serve static files (such as images, CSS, JavaScript, public) using Express’s built-in express.static middleware
             5) Error handling - define error-handling middleware with four arguments (err, req, res, next)

ii) body-parser - This module was commonly used to parse request bodies.
             1) JSON Parsing: To handle JSON-encoded bodies:
                 app.use(express.json());

             2) URL-encoded Parsing: To handle URL-encoded form data (typically sent by HTML forms)
                 app.use(express.urlencoded({ extended: true }));

- res.readFile : this function read file which is send in the readfile(filename,(err,data)) Function.

- res.sendFile : This a method used to send a file to the client as an HTTP response.

- folderpath : This variable to perform operations like reading files, serving static content, or accessing resources within that directory.
___________________________________________________________________________________________________________________________________________________________________

8) MVC Architecture : (MVC_APP1)

- MVC (Model-View-Controller) is a software design pattern commonly used for structuring applications.
- you can implement MVC architecture in Node.js applications to promote separation of concerns and maintainability.

1. Model : defined as a representation of the data(database like mongodb,mysql) and business logic(operations,workflow) of an application.

2. View : Presents data to the user and handles user interaction.It consist of Html,CSS,react,Angular JS

3. Controller : Handles user input and updates the model and view accordingly. It helps keep everything organized and ensures that
             different parts of your application work together smoothly.

- EJS : EJS stands for Embedded JavaScript,
      It allows you to embed JavaScript code directly within your HTML files, making it easier to generate dynamic content based on data from your application.

      app.set('view engine', 'ejs'); -
      rendering of dynamic HTML content by enabling the use of EJS templates, which allow embedding JavaScript code directly within HTML files.

- JS Tags : EJS allows JavaScript code to be embedded directly within HTML markup using special tags (<% %> for scriptlet tags and <%= %> for output tags).

- Control Structures: EJS also supports JavaScript control structures like if, else, for, etc., enabling conditional rendering and iteration over data.
                     <% if (user) { %>
                         <p>Hello <%= user.name %>!</p>
                     <% } else { %>
                         <p>Please log in to continue.</p>
                     <% } %>
___________________________________________________________________________________________________________________________________________________________________

8) JWT Module : (MVC_APP2)

jsonwebtoken module : It is a payload (an object containing the data you want to transmit) and sign it with a secret key.

jwt.verify(token, secretKey, (err, decoded) => { }) : To verify and decode a JWT in Node.js, you use the verify method of the jsonwebtoken library.
                                                     This checks the token’s authenticity and decodes its payload


jwt.sign(data, secretKey): This function generates a JSON Web Token (JWT) using the jsonwebtoken library in Node.js.
___________________________________________________________________________________________________________________________________________________________________

9) OOP concepts : (MVC_OOP)

- In this we peroform operations on file instead of array of object.
- we use async-await concpet majorly

- An async function is a function that operates asynchronously via the event loop, and always returns a promise.
  Inside an async function, you can use the await keyword to pause the execution of the function until a promise is resolved or rejected.

- The await keyword can only be used inside async functions. It waits for a promise to resolve and returns the resolved value.
  If the promise is rejected, it throws an error that can be caught using try...catch.
___________________________________________________________________________________________________________________________________________________________________

10) State Management : (StateMgmt)

- express-session: This module is used for managing sessions in Express applications.
                 Sessions allow you to store user data across multiple requests.
                 It's typically used for authentication and maintaining user sessions.

const session = require('express-session');
app.use(session({
    secret: 'your_secret_here', // Change this to a secure random string
    resave: false,
    saveUninitialized: false
}));

Using session: Once set up, you can now use req.session to store and access session data across requests.
               Here's a simple example of setting and accessing session data:

app.get('/setSession', (req, res) => {
req.session.username = 'JohnDoe';
res.send('Session data has been set');
});

- path: This module provides utilities for working with file and directory paths.
      It helps in constructing absolute paths and resolving relative paths.

const path = require('path');
const filePath = path.join(__dirname, 'product.json');
console.log(filePath); // Outputs: '/your/current/directory/public/index.html'
___________________________________________________________________________________________________________________________________________________________________

12) Secure Web Server : (SecureWebServer)

- It looks like you're setting up a Node.js application with Express and using some additional modules like body-parser and jsonwebtoken
with Secret key ,authorization Key
Its about implementing token-based authentication with JSON Web Tokens (JWTs) and handling
the authentication key (authkey).

Token :  It is a piece of digitally signed data that serves as a credential representing the identity and permissions of a user or entity.
         Tokens are widely used for authentication and authorization purposes in web applications
___________________________________________________________________________________________________________________________________________________________________
13) RestApi : (RestAPI-db)


A REST API (Representational State Transfer Application Programming Interface) is a standard way for different software applications to communicate over the web.
Your API can handle standard HTTP methods (GET, POST, PUT, DELETE) to interact with resources.