----------------------------------Concepts in NodeJs that we implement in MERN repository----------------------------------------------

1) Callback Function :

-  A callback in Node is a non-blocking function that executes task completion, enabling asynchronous processing. 
-  It facilitates scalability by allowing Nodejs to handle multiple requests without waiting for operations to execute
- These callbacks allow developers to interact with request data and construct the appropriate server responses.
_____________________________________________________________________________________________________________________________________________________________________

2) Built-in 'events' module (Banking Solution)

var module = require('events')     //This module provides an EventEmitter class that allows you to create and handle events in Node.js applications.
var emitter = new module.EventEmitter();  //The emitter object now can emit events and has methods to handle these events.

emitter.addListener('underBalance',bank.blockAccount);
emitter.addListener('overBalance',tax.payIncomeTax);
                    /                     \
                   /                        \
Event Listner Registration     'overBalance' is the name of the event.
we also used 'emitter.on'      When emitter.emit('overBalance') is called elsewhere in the code ,this listener function 'tax.payIncomeTax)' will be triggered.

return{
        withdraw:withdraw,  // each key-value pair represents a property where the key is the property name and the value is a function
        deposit:deposit,
        getBalance:getBalance
    }
the 'return' statement in the code is creating and exporting an object.
This object structure allows external code to interact with the account object in a controlled manner.
_____________________________________________________________________________________________________________________________________________________________________

3) SoC (Seperation of Concern) :
-  SoC is a fundamental principle in software engineering that promotes clear(no complexity), maintainable, and efficient code by separating 
different concerns into Number of modules or components.
-  SoC is not just beneficial but essential for managing the complexity and scale of large software projects.
-  It is good habit and also foundational principle that leads to better software architecture
_____________________________________________________________________________________________________________________________________________________________________

4) fs module : (CRUD)
- The Node.js file system module allows you to work with the file system on your computer.

fs.appendFile() - method appends specified content to a file. If the file does not exist, the file will be created

fs.open() -  method takes a "flag" as the second argument, if the flag is "w" for "writing", the specified file is opened for writing. 
             If the file does not exist, an empty file is created  e.g :  fs.open('mynewfile2.txt', 'w', function (err, file) {  }

fs.writeFile() -  function is used to asynchronously write data to a file.

fs.readFile()  - function is used to asynchronously read the entire contents of a file.

fs.rename()    - rename the file.

fs.unlink()    - Delete the file.
_____________________________________________________________________________________________________________________________________________________________________

5) JSON file : (CRUD)

- JSON stands for JavaScript Object Notation
- JSON is a lightweight format for storing and transporting data
- JSON is often used when data is sent from a server to a web page
e.g
{
"employees":[
    {"firstName":"John", "lastName":"Doe"},
    {"firstName":"Anna", "lastName":"Smith"},
    {"firstName":"Peter", "lastName":"Jones"}
]
}

Built-in methods for JSON :

- JSON.parse(data.toString()) : Parses the string data into a JavaScript object.

- JSON.stringify(members) : This line converts the modified members array back into a JSON-formatted string.
_____________________________________________________________________________________________________________________________________________________________________

6) Database module : (dbApp)
- mysql  : if you want to interact with MySQL databases, you can use the 'mysql' module.
- mysql2 : It offers several advantages over the older module. It provides better support for modern MySQL features such as prepared statements and stored procedures.

- mysql.createConnection() - is used to create a connection object with connection details such as host, user, password, and database name.
- connection.connect() - establishes a connection to the MySQL server. If successful, it logs the connection thread ID.
- connection.query() - executes a SQL query on the connected MySQL server.
- connection.end() - closes the connection to the MySQL server once all queries are executed.
_____________________________________________________________________________________________________________________________________________________________________

7) Modules : (Html Server)

i) express - It simplifies the development of web applications by providing a wide range of functionalities and utilities to handle various tasks such as
             1) Routing - get, post, put,delete
             2) Middleware - req, res, next
             3) Template Engines - EJS, Handlebars
             4) Static files - serve static files (such as images, CSS, JavaScript, public) using Expressâ€™s built-in express.static middleware
             5) Error handling - define error-handling middleware with four arguments (err, req, res, next)

ii) body-parser - This module was commonly used to parse request bodies.
             1) JSON Parsing: To handle JSON-encoded bodies:
                 app.use(express.json());

             2) URL-encoded Parsing: To handle URL-encoded form data (typically sent by HTML forms)
                 app.use(express.urlencoded({ extended: true }));

- res.readFile : this function read file which is send in the readfile(filename,(err,data)) Function.

- res.sendFile : This a method used to send a file to the client as an HTTP response.

- folderpath : This variable to perform operations like reading files, serving static content, or accessing resources within that directory.
_____________________________________________________________________________________________________________________________________________________________________

8) MVC Architecture : (MVC_APP1)

- MVC (Model-View-Controller) is a software design pattern commonly used for structuring applications.
- you can implement MVC architecture in Node.js applications to promote separation of concerns and maintainability.

Model : defined as a representation of the data(database like mongodb,mysql) and business logic(operations,workflow) of an application.

View : Presents data to the user and handles user interaction.It consist of Html,CSS,react,Angular JS

Controller : Handles user input and updates the model and view accordingly. It helps keep everything organized and ensures that
             different parts of your application work together smoothly.

EJS : EJS stands for Embedded JavaScript,
      It allows you to embed JavaScript code directly within your HTML files, making it easier to generate dynamic content based on data from your application.

JS Tags : EJS allows JavaScript code to be embedded directly within HTML markup using special tags (<% %> for scriptlet tags and <%= %> for output tags).

Control Structures: EJS supports JavaScript control structures like if, else, for, etc., enabling conditional rendering and iteration over data.
                     <% if (user) { %>
                         <p>Hello <%= user.name %>!</p>
                     <% } else { %>
                         <p>Please log in to continue.</p>
                     <% } %>
_____________________________________________________________________________________________________________________________________________________________________






