------------------------Concepts in NodeJs that we implement in MERN repository-----------------------------

1) Callback Function :

-  A callback in Node is a non-blocking function that executes task completion, enabling asynchronous processing. 
-  It facilitates scalability by allowing Nodejs to handle multiple requests without waiting for operations to execute
- These callbacks allow developers to interact with request data and construct the appropriate server responses.

--------#--------------------#--------------------#------------------------#-------------------------#---------------------

2) Built-in 'events' module (Banking Solution)

var module = require('events')     //This module provides an EventEmitter class that allows you to create and handle events in Node.js applications.
var emitter = new module.EventEmitter();  //The emitter object now can emit events and has methods to handle these events.

emitter.addListener('underBalance',bank.blockAccount);
emitter.addListener('overBalance',tax.payIncomeTax);
                    /                     \       
                   /                        \
Event Listner Registration     'overBalance' is the name of the event.
we also used 'emitter.on'      When emitter.emit('overBalance') is called elsewhere in the code ,this listener function 'tax.payIncomeTax)' will be triggered.

return{
        withdraw:withdraw,  // each key-value pair represents a property where the key is the property name and the value is a function
        deposit:deposit,
        getBalance:getBalance
    }
the 'return' statement in the code is creating and exporting an object.
This object structure allows external code to interact with the account object in a controlled manner.

--------#--------------------#--------------------#------------------------#-------------------------#---------------------

3) SoC (Seperation of Concern) :
-  SoC is a fundamental principle in software engineering that promotes clear(no complexity), maintainable, and efficient code by separating 
different concerns into Number of modules or components.
-  SoC is not just beneficial but essential for managing the complexity and scale of large software projects.
-  It is good habit and also foundational principle that leads to better software architecture

--------#--------------------#--------------------#------------------------#-------------------------#---------------------

4) fs module :
- The Node.js file system module allows you to work with the file system on your computer.

fs.appendFile() - method appends specified content to a file. If the file does not exist, the file will be created

fs.open() -  method takes a "flag" as the second argument, if the flag is "w" for "writing", the specified file is opened for writing. If the file does not exist, an empty file is created 
                   e.g :  fs.open('mynewfile2.txt', 'w', function (err, file) {  }

fs.writeFile() -  function is used to asynchronously write data to a file.

fs.readFile() - function is used to asynchronously read the entire contents of a file.

fs.rename() - rename the file.

fs.unlink() - Delete the file.

--------#--------------------#--------------------#------------------------#-------------------------#---------------------

5) JSON file :

- JSON stands for JavaScript Object Notation
- JSON is a lightweight format for storing and transporting data
- JSON is often used when data is sent from a server to a web page
e.g 
{
"employees":[
    {"firstName":"John", "lastName":"Doe"},
    {"firstName":"Anna", "lastName":"Smith"},
    {"firstName":"Peter", "lastName":"Jones"}
]
}

Built-in methods for JSON :

- JSON.parse(data.toString()) : Parses the string data into a JavaScript object.

- JSON.stringify(members) : This line converts the modified members array back into a JSON-formatted string.

--------#--------------------#--------------------#------------------------#-------------------------#---------------------

6)

















